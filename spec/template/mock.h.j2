{% extends "base/header.j2" %}
{% block headers %}{% endblock %}
{% block main %}
#ifdef __cplusplus
extern "C" {
#endif
{% include "base/headers.j2" %}
{{ super() }}
#ifdef __cplusplus
} // extern "C"
#endif
{% endblock %}

{% block content %}
{{ super() }}
const char *mock_name(int func);
void *mock_cur();
void *mock_get(int idx);
void *mock_peek();
void *mock_shift();
void *mock_slide(int func);
void mock_print(const packed_call_t *packed);
void mock_push(void *call);

packed_call_t *_mock_expect(char *name, int index);
#define mock_expect(name) _mock_expect(#name, name##_INDEX);

static int verbose_test = 0;
static int failed_test = 0;
#define verbose { verbose_test = 1; }

#define mock_warningf(...) { printf("WARNING: "), printf(__VA_ARGS__); }
#define mock_errorf(...) { printf("ERROR: "); printf(__VA_ARGS__); failed_test = 1; }
#define mock_assert(cond, ...) { if (!(cond)) { mock_errorf(__VA_ARGS__); }}
#define assert(cond) mock_assert(cond, "%s\n", #cond)

#define VT100_RED "\e[1;31m"
#define VT100_CLEAR "\e[0m"

int mock_fcmp(float *a, float *b, size_t len);
void mock_fdiff(float *a, float *b, size_t len);
void mock_ptrdiff(char *prefix, void *ptr, void *other, size_t size);

#define mock_return { \
    packed_call_t *call = NULL; \
    while ((call = mock_shift()) != NULL) { \
        mock_warningf("extra "); \
        mock_print(call); \
    } \
    if (state.error) { \
        mock_warningf("Ended with GL error flag: %s\n", gl_str(state.error)); \
    } \
    return failed_test; \
}

{% for func in functions %}
#define emit_{{ func.name }}({{ func.args|args(0) }}) { \
    mock_push(pack_{{ func.name }}(NULL{% if func.args %}, {{ func.args|args(0) }}{% endif %})); \
}
#define test_{{ func.name }}({{ func.args|args(0, '_') }}) { \
    {{ func.name }}_PACKED *packed = mock_expect({{ func.name }}); \
    if (packed) { \
        int match = 1; \
        void *a, *b; \
        {% if func.args %}
        {% for arg in func.args %}
        {% if '*' in arg.type %}
        a = packed->args.{{ arg.name }}, b = _{{ arg.name }}; \
        {% set cmp = 'memcmp' %}
        {% if 'float' in arg.type %}{% set cmp = 'mock_fcmp' %}{% endif %}
        if (b == NULL && a != NULL || (a != NULL && b != NULL && ({{ cmp }}(a, b, sizeof(_{{ arg.name }})) != 0))) { \
            printf("  ERROR: arg mismatch: {{ arg.name }}\n"); \
            mock_ptrdiff("  expected:", (void *)b, (void *)a, sizeof(_{{ arg.name }})); \
            mock_ptrdiff("     found:", (void *)a, (void *)b, sizeof(_{{ arg.name }})); \
        {% elif 'float' in arg.type or 'double' in arg.type %}
        if (packed->args.{{ arg.name }} - _{{ arg.name }} >= 0.01) { \
        {% else %}
        if (packed->args.{{ arg.name }} != _{{ arg.name }}) { \
        {% endif %}
            match = 0; \
        } \
        {% endfor %}
        if (! match) { \
            mock_errorf("calls do not match:\n"); \
            printf("  have: "); mock_print((const packed_call_t *)packed); \
            printf("  want: {{ func.name }}({{ func.args|printf }});\n", {{ func.args|args(0, '_') }}); \
        } \
        {% endif %}
    } \
}
{% endfor %}

{% for func in functions %}
{% if not func.name.startswith('glX') %}
{{ func.return }} gles_{{ func.name }}({{ func.name }}_ARG_EXPAND);
{% endif %}
{% endfor %}
{% endblock %}
