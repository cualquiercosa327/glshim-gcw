{% from "base/util.j2" import args, call %}
{% extends "base/header.j2" %}
{% block content %}

{% for f in functions %}
{% if f.args %}
typedef struct {
    {% for arg in f.args %}
    {{ arg.type|unconst }} {{ arg.name }}{% if arg.type == 'GLdouble' %} __attribute__ ((aligned(8))){% endif %};
    {% endfor %}
} {{ f.name }}_ARGS;
{% endif %}
typedef struct {
    int index;
    {% if f.args %}
    {{ f.name }}_ARGS args;
    {% endif %}
} {{ f.name }}_PACKED;
{% endfor %}

extern const int INDEX_RET_SIZE[];
extern const int INDEX_PACKED_SIZE[];
extern const char *INDEX_NAME[];
extern void glPushCall(void *data);
void glIndexedCall(const packed_call_t *packed, void *ret_v);
void glIndexedPrint(const packed_call_t *packed);

{% for func in functions %}
#define {{ func.name }}_INDEX {{ loop.index }}
#define {{ func.name }}_RETURN {{ func.return }}
#define {{ func.name }}_ARG_NAMES {{ func.args|args(0) }}
#define {{ func.name }}_ARG_EXPAND {{ func.args|args }}
#define {{ func.name }}_ARG_NAMES_TAIL {% if func.args %}, {{ func.args|args(0) }}{% endif %}

#define {{ func.name }}_ARG_EXPAND_TAIL {% if func.args %}, {{ func.args|args }}{% endif %}

#define forward_{{ func.name }}({{ func.args|args(0, '_') }}) \
    ({ \
        void *dst = remote_dma(sizeof({{ func.name }}_PACKED)); \
        {% if func.void %}
        remote_dma_send((packed_call_t *)pack_{{ func.name }}(dst{% if func.args %}, {% endif %}{{ func.args|args(0, '_') }}), NULL); \
        {% else %}
        {{ func.return }} ret = ({{ func.return }})0; \
        remote_dma_send((packed_call_t *)pack_{{ func.name }}(dst{% if func.args %}, {% endif %}{{ func.args|args(0, '_') }}), &ret); \
        ret; \
        {% endif %}
    });
#define call_{{ func.name }}(packed, ret_v) do { \
    {% if func.args %}
    {{ func.name }}_PACKED *unpacked = ({{ func.name }}_PACKED *)packed; \
    {{ func.name }}_ARGS *args = ({{ func.name }}_ARGS *)&unpacked->args; \
    {% endif %}
    {% if not func.void %}
    {{ func.return }} *ret = ({{ func.return }} *)ret_v; \
    if (ret != NULL) { \
        *ret = {{ call(func) }}; \
    } else { \
        {{ call(func) }}; \
    } \
    {% else %}
    {{ call(func) }}; \
    {% endif %}
} while(0)
{{ func.return }} {{ func.name }}({{ func.name }}_ARG_EXPAND);
packed_call_t *pack_{{ func.name }}({{ func.name }}_PACKED *_dst {{ func.name }}_ARG_EXPAND_TAIL);
typedef {{ func.return }} (*{{ func.name }}_PTR)({{ func.name }}_ARG_EXPAND);
{% endfor %}

{% endblock %}
