{% extends "base/base.j2" %}
{% block main %}
#include <stdio.h>
#include "tack.h"

int mock_fcmp(float *a, float *b, size_t len) {
    len /= sizeof(float);
    for (size_t i = 0; i < len; i++) {
        if (b[i] - a[i] > 0.00001) return 1;
        if (a[i] - b[i] > 0.00001) return -1;
    }
    return 0;
}

void mock_fdiff(float *a, float *b, size_t len) {
    for (int i = 0; i < len; i++) {
        if (mock_fcmp(&a[i], &b[i], sizeof(float)) == 0) {
            printf("%f ", a[i]);
        } else {
            printf(VT100_RED "%f " VT100_CLEAR, a[i]);
        }
    }
}

void mock_ptrdiff(char *prefix, void *ptr, void *other, size_t size) {
    printf("%s ", prefix);
    if (ptr == NULL) {
        printf("NULL");
    } else {
        char *ac = ptr, *bc = other;
        for (size_t i = 0; i < size; i++) {
            if (i > 0 && i % 4 == 0) printf(" ");
            if (i > 0 && i % 32 == 0) {
                printf("| ");
                mock_fdiff((float *)&ac[i - 32], (float *)&bc[i - 32], 8);
                printf("\n");
                printf("            ");
            }
            if (ac[i] != bc[i]) {
                printf("%02X", (unsigned char)ac[i]);
            } else {
                printf(VT100_RED "%02X" VT100_CLEAR, (unsigned char)ac[i]);
            }
        }
        int start = size - 32;
        if (size % 32 != 0) {
            size - (size % 32);
        }
        printf(" | ");
        mock_fdiff((float *)&ac[start], (float *)&bc[start], (size - start) / sizeof(float));
    }
    printf("\n");
}

static tack_t mock = {0};

const char *mock_name(int func) {
    switch (func) {
        {% for f in functions %}
        case {{ f.name }}_INDEX: return "{{ f.name }}";
        {% endfor %}
    }
}

void mock_print(const packed_call_t *packed) {
    if (packed == NULL) {
        printf("NULL()\n");
        return;
    }
    switch (packed->index) {
        {% for f in functions %}
        case {{ f.name }}_INDEX: {
            {{ f.name }}_PACKED *unpacked = ({{ f.name }}_PACKED *)packed;
            printf("{{ f.name }}({{ f.args|printf }});\n"
            {%- for arg in f.args %}, unpacked->args.{{ arg.name }}{% endfor -%});
            break;
        }
        {% endfor %}
    }
}

packed_call_t *_mock_expect(char *name, int index) {
    packed_call_t *packed = mock_cur();
    if (packed == NULL) {
        mock_errorf("%s missing (no calls left)\n", name);
    } else if (packed->index != index) {
        if (verbose_test) {
            mock_print(mock_cur());
        }
        packed_call_t *tmp = packed;
        packed = mock_slide(index);
        if (! packed) {
            mock_errorf("%s missing\n", name);
        } else {
            mock_warningf("unexpected call while looking for %s:\n  ", name);
            mock_print(tmp);
        }
    } else {
        if (verbose_test) {
            mock_print(mock_cur());
        }
        mock_shift();
    }
    return packed;
}

void *mock_get(int idx) {
    return tack_get(&mock, idx);
}

void *mock_peek() {
    return tack_peek(&mock);
}

void *mock_cur() {
    return tack_cur(&mock);
}

void *mock_shift() {
    return tack_shift(&mock);
}

void *mock_slide(int func) {
    if (mock.pos >= mock.len) {
        return NULL;
    }
    packed_call_t **stack = (packed_call_t **)mock.data;
    for (int i = mock.pos; i < mock.len; i++) {
        if (stack[i]->index == func) {
            mock.pos = i + 1;
            return stack[i];
        }
    }
    return NULL;
}

void mock_push(void *call) {
    tack_push(&mock, call);
}

void *mock_pop() {
    return tack_pop(&mock);
}

{% for func in functions %}
{{ func.return }} {% if not func.name.startswith('glX') %}gles_{% endif %}{{ func.name }}({{ func.args|args }}) {
    emit_{{ func.name }}({{ func.args|args(0) }});
    {% if not func.void %}
    return ({{ func.return }})0;
    {% endif %}
}
{% endfor %}

{% endblock %}
